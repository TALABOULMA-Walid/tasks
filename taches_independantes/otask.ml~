value computeStarTime ot t =
min ot.istartTime t.firstActivation;
(****************************************************************************************)
value computeTransPart ot t=
let trans= ref  t.firstActivation in 
while !trans<ot.istartTime do
  trans:=(!trans) +t.period;
!trans;

value rec gcd x y =
  if x < y then
    if x = 0 then y
    else gcd (y mod x) x
  else if x > y then
    gcd y x
  else x
;
(****************************************************************************************)
value lcm x y = x / gcd x y * y;
(****************************************************************************************)
value computePermPart ot t =
 return lcm ot.ppcm t.period;
(****************************************************************************************)
value buildOplus t =
let sched=Array.create t.priod 0 in
int i =ref 0 in 
while !i<t.wcet-1 do
 { sched.(!i)<-1;
  i:=!i+1;
 } 
return {istarTime=t.firstActivation;itrans=t.firstActivation;iperm=t.firstActivation;schedul=sched};
(****************************************************************************************)
value doSchedule ot1 t=
let startTime=computeStarTime ot t in
let tran=computeTransPart ot t in
let perm=computePermPart ot t in
let sched=Array.create (tran+perm) 0 in
ot2={istarTime=startTime;itrans=computeTransPart;perm=computePermPart;schedul=sched}
let wcet=ref t.period in 
let FRT=ref 0 in
let i=ref ot1.itran in 
let exec =ref false in 
let schedulable =ref true in
for k=0 to (ot2.schedule.length/t.period)-1 do{
  let j=ref ot2.startTime+(k*t.period) in
  while j<=(k+1)*t.period) do {
    while j<(ot1.itran) do {
     if(!wcet>0){
        wcet:=!wcet-1 ; 
        ot2.schedule.(j)<-t.id;
        if(k=0) 
         FRT:=!FRT+1;
        exec:= ref true;
      }
     else{
      exec:= ref false;
     }
     j:=!j+1; 
    }


   if(!i=(ot1.itrans+ot1.perm)-1)
    i:=ref 0 ;

   if(st1.schedule.(i)!=0){
     st2.schedule.(j)=st1.schedule.(i);
     if(!exec= true)
     wcet:=!wcet+1 ; 
     exec= ref false;
   } 
   else
   {wcet:=!wcet-1 ; 
    ot2.schedule.(j)<-t.id;
    if(k=0) 
    FRT:=!FRT+1;
    exec:= ref true;
   }
   i:=!i+1; 
   j:=!j+1; 
 }
 if( wcet>0)
 schedulable:=ref true ;
} 
if (!schedulable=true) 
return ot2 ;
else
return null;

value printOtask ot =
for i=0 to (ot.itran+perm)-1 do {
  if(i=itran)
    printf "|" ;
  else
    printf "%d" ot.schedule.(i);
}

value main =do{
let task1={id=1;firstActivation=1;wcet=2;period=10;deadline=10}
let task2={id=2;firstActivation=0;wcet=3;period=10;deadline=10}
printOtask (oplus (buildOplus task1) task2);
}

